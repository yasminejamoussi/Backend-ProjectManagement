pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
       // FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqube-token')
        NEXUS_URL = 'http://192.168.33.10:8081'
        NEXUS_REPOSITORY = 'dockr-repo'
        NEXUS_CREDENTIAL_ID = 'nexus-credentials'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üì• Clonage du Backend..."
                    sh "git clone -b cicd ${BACKEND_REPO} backend"
                  /*  echo "üì• Clonage du Frontend..."
                    sh "git clone ${FRONTEND_REPO} frontend"*/
                }
            }
        }
    }
        stage('Install Dependencies') {
            //parallel {
                stage('Backend') {
                    steps {
                        dir('backend') {
                            echo "üì¶ Installation des d√©pendances du backend..."
                            sh 'npm install'
                        }
                    }
                }
              /*  stage('Frontend') {
                    steps {
                        dir('frontend') {
                            echo "üì¶ Installation des d√©pendances du frontend..."
                            sh 'npm install'
                        }
                    }
                }*/
           // }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') {
                        dir('backend') {
                            echo "üöÄ Analyse SonarQube..."
                            timeout(time: 10, unit: 'MINUTES') {
                                withEnv(["SONAR_LOGIN=${SONAR_TOKEN}"]) {
                                    sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=projectpi \
                                    -Dsonar.sources=src \
                                    -Dsonar.language=js \
                                    -Dsonar.exclusions=**/*.test.js,**/*.spec.js,**/node_modules/**,**/coverage/**,src/models/**,,src/utils/**,src/controllers/**,src/routes/**,src/middleware/**,src/server.js \
                                    -Dsonar.host.url=http://192.168.33.10:9000 \
                                    -Dsonar.login=${SONAR_LOGIN} \
                                    -X || true
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Unit Test Backend') {
            steps {
                dir('backend') {
                    sh 'npm install --save-dev jest-junit'
                    timeout(time: 10, unit: 'MINUTES') {
                        sh 'npm test -- --ci --forceExit --reporters=default --reporters=jest-junit --verbose --detectOpenHandles'
                    }
                }
            }
        }

      /*  stage('Build Frontend') {
            steps {
                dir('frontend') {
                    echo "üõ†Ô∏è Construction du frontend..."
                    sh 'npm run build'
                }
            }
        }*/

      stage('Deploy Docker Image to Nexus') {
    steps {
        script {
            echo "üì§ D√©ploiement de l'image backend vers Nexus..."
            dir('backend') {
                sh 'ls -l Dockerfile || echo "‚ö†Ô∏è  Dockerfile introuvable !"'

                def imageName = "projectmanagement"
                def imageTag = "${env.BUILD_NUMBER}"
                def fullImageName = "${imageName}:${imageTag}"

                echo "üöÄ Construction de l'image Docker..."
                sh "docker build -t ${fullImageName} --no-cache ."

                echo "üì¶ Sauvegarde de l'image..."
                sh "docker save -o backend-image.tar ${fullImageName}"

                echo "üì§ Upload de l'image sur Nexus..."
                sh """
                mvn deploy:deploy-file \
                    -Dfile=backend-image.tar \
                    -DgroupId=com.example \
                    -DartifactId=backend-image \
                    -Dversion=${imageTag} \
                    -Dpackaging=tar \
                    -DrepositoryId=nexus-releases \
                    -Durl=${NEXUS_URL}/repository/maven-releases/ \
                    -s /usr/share/maven/conf/settings.xml
                """
            }
        }
    }
}


        stage('Run Application') {
            steps {
                script {
                    echo "üöÄ D√©marrage de l'application..."
                  sh 'docker-compose -f docker-compose.yaml up -d api'

                }
            }
        }
    

    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs.'
        }
        always {
            echo "üìÇ Nettoyage de l'espace de travail apr√®s ex√©cution..."
           // sh 'docker-compose down -v || true'
            cleanWs()
        }
    }

}