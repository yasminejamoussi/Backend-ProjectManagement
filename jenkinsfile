pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqube-token') 
    }

    stages {
        stage('Debug Credentials') {
            steps {
                script {
                    echo "SonarQube Token récupéré: ${SONAR_TOKEN}"
                }
            }
        }
        stage('Checkout Code') {
            steps {
                script {
                    echo "🧹 Nettoyage de l'espace de travail..."
                    cleanWs()

                     
            sh "git config --global http.postBuffer 524288000"
            sh "git config --global https.postBuffer 524288000"

                    echo "📥 Clonage du Backend..."
                    sh "git clone ${BACKEND_REPO} backend"

                    echo "📥 Clonage du Frontend..."
                  //  sh "git clone ${FRONTEND_REPO} frontend"
                  retry(3) {
                sh script: "git clone --progress --verbose ${FRONTEND_REPO} frontend", returnStdout: true
            }
                }
            }
        }
        stage('Debug Docker Compose File') {
            steps {
                script {
                    echo "📂 Vérification des fichiers dans le répertoire principal..."
                    sh 'ls -la'
                    echo "📂 Vérification des fichiers dans backend..."
                    dir('backend') {
                        sh 'ls -la'
                    }
                    echo "📂 Vérification des fichiers dans frontend..."
                    dir('frontend') {
                        sh 'ls -la'
                    }
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    dir('frontend') {
                        echo "📦 Installation des dépendances du frontend..."
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    dir('backend') {
                        echo "📦 Installation des dépendances du backend..."
                        sh 'npm install'
                    }
                }
            }
        }

       
stage('SonarQube Analysis') {
    steps {
        script {
            def scannerHome = tool 'scanner'
            withSonarQubeEnv('scanner') { 
                dir('backend') {
                    echo "🚀 Démarrage de l'analyse SonarQube..."
                    sh "echo 'SonarQube Server URL: ${env.SONAR_HOST_URL}'"
                    sh "echo 'SonarQube Token: ${SONAR_TOKEN}'"
                    sh "curl -s http://192.168.33.10:9000 || echo 'ERROR: Cannot reach SonarQube server'"
                    timeout(time: 15, unit: 'MINUTES') {
                        withEnv(["SONAR_LOGIN=${SONAR_TOKEN}"]) {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=projectpi \
                                -Dsonar.sources=src \
                                -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/coverage/**,src/models/LoginAttempt.js \
                                -Dsonar.host.url=http://192.168.33.10:9000 \
                                -Dsonar.login=\${SONAR_LOGIN} \
                                -Dsonar.javascript.node.maxspace=3072 \
                                -Dsonar.verbose=true \
                                -Dsonar.scanner.skipJstsAnalysis=true \
                                -Dsonar.javascript.enabled=false
                            """
                        }
                    }
                }
            }
        }
    }
}

  stage('Install Docker Compose') {
    steps {
        script {
            sh '''
                if ! command -v docker-compose >/dev/null 2>&1; then
                    echo "Installing Docker Compose..."
                    sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                fi
                docker-compose --version
            '''
        }
    }
}

stage('Start Docker Services') {
    steps {
        script {
            echo "🚀 Démarrage des services Docker..."
            dir('backend') {
                sh 'export PATH=$PATH:/usr/local/bin'
                sh 'docker-compose -f docker-compose.yaml up -d'
            }
        }
    }
}



        stage('Clean Docker Environment') {
            steps {
                echo "🧹 Nettoyage de l'environnement Docker..."
                sh './docker-compose down -v --rmi local || true'
                sh 'docker system prune -f || true'
            }
        }
stage('Check Docker Compose Installation') {
    steps {
        script {
            sh 'which docker-compose || echo "❌ docker-compose non trouvé"'
        }
    }
}



        stage('Unit Test Backend') {
            steps {
                script {
                    dir('backend') {
                        sh 'npm install --save-dev jest-junit' 
                        timeout(time: 5, unit: 'MINUTES') {
                            sh 'npm test -- --ci --forceExit --reporters=default --reporters=jest-junit'
                        }
                    }
                }
            }
        }
        stage('Debug Directory') {
            steps {
                echo "📂 Contenu de la racine :"
                sh 'ls -la'
                dir('backend') {
                    echo "📂 Contenu de backend :"
                    sh 'ls -la'
                }
                dir('frontend') {
                    echo "📂 Contenu de frontend :"
                    sh 'ls -la'
                }
            }
        }
        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        echo "🛠️ Construction du frontend..."
                        sh 'npm run build'
                    }
                }
            }
        }

stage('Check Docker Compose') {
    steps {
        script {
            sh 'docker-compose --version'
        }
    }
}

    stage('Building Docker Images') {
            steps {
                script {
                    dir('backend') {  
                        echo "🚀 Build des images Docker..."
                        sh './docker-compose -f docker-compose.yaml build'
                    }
                }
            }
        }



        stage('Run Application') {
            steps {
                script {
                    echo "🚀 Démarrage de l'application..."
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline exécuté avec succès !'
        }
        failure {
            echo '❌ Le pipeline a échoué. Vérifiez les logs.'
        }
       always {
            node('master') { 
                echo "📂 Nettoyage de l'espace de travail après exécution..."
                cleanWs()
            }
        }
    }
}