pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqube-token') // R√©cup√©ration du token depuis Jenkins
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üßπ Nettoyage de l'espace de travail..."
                    cleanWs()

                    echo "üì• Clonage du Backend..."
                    sh "git clone ${BACKEND_REPO} backend"

                    echo "üì• Clonage du Frontend..."
                    sh "git clone ${FRONTEND_REPO} frontend"
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    dir('frontend') {
                        echo "üì¶ Installation des d√©pendances du frontend..."
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    dir('backend') {
                        echo "üì¶ Installation des d√©pendances du backend..."
                        sh 'npm install'
                    }
                }
            }
        }

                    stage('SonarQube Analysis') {
                steps {
                    script {
                        def scannerHome = tool 'scanner'
                        withSonarQubeEnv('scanner') {
                            dir('backend') {
                                echo "üöÄ D√©marrage de l'analyse SonarQube..."
                                timeout(time: 10, unit: 'MINUTES') { // Augmente le timeout
                                    sh """
                                        ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=projectpi \
                                        -Dsonar.sources=. \
                                        -Dsonar.host.url=http://192.168.33.10:9000 \
                                        -Dsonar.login=${SONAR_TOKEN} \
                                        -Dsonar.verbose=true
                                    """
                                }
                            }
                        }
                    }
                }
            }

       stage('Unit Test Backend') {
    steps {
        script {
            dir('backend') {
                sh 'npm install --save-dev jest-junit' // ‚úÖ Ajoute cette ligne avant d'ex√©cuter les tests
                timeout(time: 5, unit: 'MINUTES') {
                    sh 'npm test -- --ci --forceExit --reporters=default --reporters=jest-junit'
                }
            }
        }
    }
}


        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        echo "üõ†Ô∏è Construction du frontend..."
                        sh 'npm run build'
                    }
                }
            }
        }

       stage('Building Docker Images') {
    steps {
        script {
         
               sh 'docker-compose -f docker-compose.yaml build'
            
        }
    }
}


       stage('Run Application') {
    steps {
        script {
            dir('backend') {  // Se place dans le bon r√©pertoire avant d'ex√©cuter la commande
                sh 'docker-compose up -d'
            }
        }
    }
}

}

    }

    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs.'
        }
        always {
            echo "üìÇ Nettoyage de l'espace de travail apr√®s ex√©cution..."
            cleanWs() // Nettoie le workspace apr√®s le pipeline
        }
    }
}
