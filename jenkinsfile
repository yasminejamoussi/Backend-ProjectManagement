pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqube-token') // 🔹 Récupération du token depuis Jenkins
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "🧹 Nettoyage de l'espace de travail..."
                    // Moved cleanWs to post section to avoid race conditions

                    echo "📥 Clonage du Backend..."
                    sh "git clone ${BACKEND_REPO} backend"

                    echo "📥 Clonage du Frontend..."
                    sh "git clone ${FRONTEND_REPO} frontend"
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    dir('frontend') {
                        echo "📦 Installation des dépendances du frontend..."
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    dir('backend') {
                        echo "📦 Installation des dépendances du backend..."
                        sh 'npm install'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner' // 🔹 Assurez-vous que le scanner est bien configuré
                    withSonarQubeEnv('SonarQubeServer') { // 🔹 Match this with your configured SonarQube server name
                        dir('backend') {
                            echo "🚀 Démarrage de l'analyse SonarQube..."
                            timeout(time: 10, unit: 'MINUTES') {
                                sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=projectpi \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=http://192.168.33.10:9000 \
                                    -Dsonar.login=${SONAR_TOKEN} \
                                    -Dsonar.verbose=true
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Unit Test Backend') {
            steps {
                script {
                    dir('backend') {
                        sh 'npm install --save-dev jest-junit' // 🔹 Ajoute cette ligne avant d'exécuter les tests
                        timeout(time: 5, unit: 'MINUTES') {
                            sh 'npm test -- --ci --forceExit --reporters=default --reporters=jest-junit'
                        }
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        echo "🛠️ Construction du frontend..."
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Check Docker Compose') {
            steps {
                script {
                    sh 'docker-compose --version || echo "Docker Compose not found"'
                }
            }
        }

        stage('Building Docker Images') {
            steps {
                script {
                    dir('backend') {
                        echo "🚀 Build des images Docker..."
                        sh 'docker-compose -f docker-compose.yml build || exit 1'
                    }
                }
            }
        }

        stage('Run Application') {
            steps {
                script {
                    echo "🚀 Démarrage de l'application..."
                    timeout(time: 5, unit: 'MINUTES') {
                        sh 'docker-compose up -d || exit 1'
                    }
                }
            }
        }
    }

post {
        success {
            echo '✅ Pipeline exécuté avec succès !'
        }
        failure {
            echo '❌ Le pipeline a échoué. Vérifiez les logs.'
        }
        always {
            node('master') { // 🔹 Ajout d'un label 'any' pour utiliser n'importe quel agent disponible
                echo "📂 Nettoyage de l'espace de travail après exécution..."
                cleanWs() // Nettoie le workspace après le pipeline
            }
        }
    }
}