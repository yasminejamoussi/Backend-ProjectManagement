pipeline {
    agent any 
    

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqb')
        NEXUS_URL = '192.168.33.10:8081'
        NEXUS_REPOSITORY = 'dockr-repo'
        NEXUS_CREDENTIAL_ID = 'nexus'
    }

   stages {
     
        stage('Checkout Code') {
            steps {
                script {
                    echo "üì• Clonage du Backend..."
                    sh "git clone -b finaldocker ${BACKEND_REPO} backend"
                    echo "üì• Clonage du Frontend..."
                    sh "git clone -b finaldocker ${FRONTEND_REPO} frontend"
                   
                }
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('Backend') {
                    steps {
                        dir('backend') {
                            echo "üì¶ Installation des d√©pendances du backend..."
                            sh 'npm install'
                        }
                    }
                }
                stage('Frontend') {
                    steps {
                        dir('frontend') {
                            echo "üì¶ Installation des d√©pendances du frontend..."
                            sh 'npm install'
                        }
                    }
                }
            }
        }

          stage('Unit Test Backend') {
    steps {
        dir('backend') {
            sh 'npm install --save-dev jest-junit'
            echo "üîç Attente de la disponibilit√© de mongo-test..."
            sh 'until nc -z 192.168.1.18 27018; do echo "En attente de mongo-test..."; sleep 5; done'
            echo "‚úÖ Mongo-test est accessible !"
            timeout(time: 30, unit: 'MINUTES') {
                // Run tests with coverage
                sh 'docker-compose run --rm api npm test -- --coverage --reporters=default --reporters=jest-junit --verbose --detectOpenHandles'
            }
        }
    }
}

stage('SonarQube Analysis') {
    steps {
        script {
            def scannerHome = tool 'sonarqube'
            def exclusions = "**/*.spec.js,**/node_modules/**,**/coverage/**,src/utils/**,src/controllers/**,src/routes/**,src/middleware/**,src/server.js"
            withSonarQubeEnv('sonarqube') {
                dir('backend') {
                    echo "üöÄ Analyse SonarQube..."
                    timeout(time: 10, unit: 'MINUTES') {
                        withEnv(["SONAR_LOGIN=${SONAR_TOKEN}"]) {
                            sh """
                            ${scannerHome}/bin/sonar-scanner \
                             -Dsonar.projectKey=ProjectManagementPI \
                             -Dsonar.projectName=ProjectManagementPI \
                             -Dsonar.sources=src \
                             -Dsonar.language=js \
                             -Dsonar.exclusions="${exclusions}" \
                             -Dsonar.host.url=http://192.168.33.10:9000 \
                             -Dsonar.login=${SONAR_LOGIN} \
                             -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                             -X || true
                            """
                        }
                    }
                }
            }
        }
    }
}
/* KHALIL stage('Unit Test Backend') {
            steps {
                dir('backend') {
                    sh 'npm install --save-dev jest-junit'
                    timeout(time: 10, unit: 'MINUTES') {
                        sh 'npm test -- --ci --forceExit --reporters=default --reporters=jest-junit --verbose --detectOpenHandles'
                    }
                }
            }
        }*/
     
                /* RANIM stage('Unit Test Backend') {
            steps {
                dir('backend') {
                    sh 'npm install --save-dev jest-junit'
                    echo "üîç Attente de la disponibilit√© de mongo-test..."
                    sh 'until nc -z 192.168.1.16 27018; do echo "En attente de mongo-test..."; sleep 5; done'
                    echo "‚úÖ Mongo-test est accessible !"
                    timeout(time: 30, unit: 'MINUTES') { // Augmenter √† 30 minutes pour plus de marge
                        sh 'docker-compose run --rm api npm test'
                    }
                }
            }
        }*/


       stage('Build Frontend') {
    steps {
        dir('frontend/projectmanagement') {
            echo "üõ†Ô∏è Construction du frontend..."
            sh 'npm install'
            echo "üîç Liste des scripts disponibles dans package.json :"
            sh 'npm run'
            sh 'npm run build'
        }
    }
}

       /*stage('Deploy Docker Image to Nexus') {
            steps {
                script {
                    echo "üì§ D√©ploiement de l'image backend vers Nexus..."
                    dir('backend') {
                        def imageName = "projectmanagement"
                        def imageTag = "${env.BUILD_NUMBER}"
                        def fullImageName = "${imageName}:${imageTag}"
                        
                        sh "docker build -t ${fullImageName} ."
                        docker.withRegistry("http://${NEXUS_URL}", NEXUS_CREDENTIAL_ID) {
                            sh "docker tag ${fullImageName} ${NEXUS_URL}/${imageName}:${imageTag}"
                            sh "docker push ${NEXUS_URL}/${imageName}:${imageTag}"
                        }
                    }
                }
            }
        }*/
        stage('Deploy Docker Image to Nexus') {
    steps {
        script {
            echo "üì§ D√©ploiement de l'image backend vers Nexus..."
            dir('backend') {
                def imageName = "projectmanagement"
                def imageTag = "${env.BUILD_NUMBER}"
                def fullImageName = "${imageName}:${imageTag}"
                def nexusDockerUrl = "${NEXUS_URL}" // Utilise 8081 comme demand√©

                sh "docker build -t ${fullImageName} ."
                withDockerRegistry([url: "http://${nexusDockerUrl}", credentialsId: NEXUS_CREDENTIAL_ID, skipTlsVerify: true]) {
                    sh "docker tag ${fullImageName} ${nexusDockerUrl.replace('http://', '')}/docker-repo/${imageName}:${imageTag}"
                    sh "docker push ${nexusDockerUrl.replace('http://', '')}/docker-repo/${imageName}:${imageTag}"
                }
            }
        }
    }
}

        stage('Run Application') {
            steps {
                script {
                    echo "üöÄ D√©marrage de l'application..."
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }
    }


 post {
    success {
        echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
    }
    failure {
        echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs.'
    }
    always {
        echo "üìÇ Nettoyage de l'espace de travail apr√®s ex√©cution..."
        sh 'docker-compose down -v || true'
        cleanWs()
    }
}
    
}
