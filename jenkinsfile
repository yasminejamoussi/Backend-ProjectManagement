pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    sh 'rm -rf *' // Nettoyage de l'espace de travail

                    echo "üì• Clonage du Backend..."
                    sh "git clone ${BACKEND_REPO} backend"

                    echo "üì• Clonage du Frontend..."
                    sh "git clone ${FRONTEND_REPO} frontend"
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    dir('frontend') {
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    dir('backend') {
                        sh 'npm install'
                    }
                }
            }
        }

         stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner' // Assurez-vous que 'scanner' est configur√© dans Jenkins
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Unit Test Backend') {
            steps {
                script {
                    dir('backend') {
                        timeout(time: 5, unit: 'MINUTES') {
                            sh 'npm test -- --ci --reporters=default --reporters=jest-junit'
                        }
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Building Docker Images') {
            steps {
                script {
                    echo "üöÄ Build des images Docker..."
                    sh 'docker-compose build'
                }
            }
        }

        stage('Run Application') {
            steps {
                script {
                    echo "üöÄ D√©marrage des services avec Docker Compose..."
                    timeout(time: 5, unit: 'MINUTES') {
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs.'
        }
        always {
            junit 'backend/test-results.xml'
        }
    }
}
