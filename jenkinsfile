pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqube-token-new') // üîπ R√©cup√©ration du token depuis Jenkins
    }

    stages {
        stage('Debug Credentials') {
            steps {
                script {
                    echo "SonarQube Token r√©cup√©r√©: ${SONAR_TOKEN}"
                  
                }
            }
        }
        stage('Checkout Code') {
            steps {
                script {
                    echo "üßπ Nettoyage de l'espace de travail..."
                    cleanWs()

                      // Configurer le buffer Git
            sh "git config --global http.postBuffer 524288000"
            sh "git config --global https.postBuffer 524288000"

                    echo "üì• Clonage du Backend..."
                    sh "git clone ${BACKEND_REPO} backend"

                    echo "üì• Clonage du Frontend..."
                  //  sh "git clone ${FRONTEND_REPO} frontend"
                  retry(3) {
                sh script: "git clone --progress --verbose ${FRONTEND_REPO} frontend", returnStdout: true
            }
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    dir('frontend') {
                        echo "üì¶ Installation des d√©pendances du frontend..."
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    dir('backend') {
                        echo "üì¶ Installation des d√©pendances du backend..."
                        sh 'npm install'
                    }
                }
            }
        }

        /*stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner' // üîπ Assurez-vous que le scanner est bien configur√©
                    withSonarQubeEnv('scanner')
                    
                     {
                        dir('backend') {
                            echo "üöÄ D√©marrage de l'analyse SonarQube..."
                            timeout(time: 15, unit: 'MINUTES') { // Augmente le timeout
                                sh """
                                    export SONAR_SCANNER_OPTS="-Xmx4g"
                                    export NODE_OPTIONS="--max-old-space-size=4096"
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=projectpi \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=http://192.168.33.10:9000 \
                                    -Dsonar.login=${SONAR_TOKEN} \
                                    -Dsonar.verbose=true
                                """
                            }
                        }
                    }
                }
            }
        }*/
      stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('sonarqube') {
                        dir('backend') {
                            echo "üöÄ D√©marrage de l'analyse SonarQube..."
                            // Add debugging steps
                            sh "echo 'SonarQube Server URL: ${env.SONAR_HOST_URL}'"
                            sh "curl -s http://192.168.33.10:9000 || echo 'ERROR: Cannot reach SonarQube server'"
                            timeout(time: 15, unit: 'MINUTES') {
                                // Use withCredentials to securely access the token
                                withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                                    sh """
                                        ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=projectpi \
                                        -Dsonar.sources=src \
                                        -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/coverage/**,src/models/LoginAttempt.js \
                                        -Dsonar.host.url=http://192.168.33.10:9000 \
                                        -Dsonar.login=${SONAR_TOKEN} \
                                        -Dsonar.javascript.node.maxspace=4096 \
                                        -Dsonar.verbose=true
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }
}

        stage('Unit Test Backend') {
            steps {
                script {
                    dir('backend') {
                        sh 'npm install --save-dev jest-junit' // üîπ Ajoute cette ligne avant d'ex√©cuter les tests
                        timeout(time: 5, unit: 'MINUTES') {
                            sh 'npm test -- --ci --forceExit --reporters=default --reporters=jest-junit'
                        }
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        echo "üõ†Ô∏è Construction du frontend..."
                        sh 'npm run build'
                    }
                }
            }
        }

stage('Check Docker Compose') {
    steps {
        script {
            sh 'docker-compose --version'
        }
    }
}

       stage('Building Docker Images') {
    steps {
        script {
            dir('backend') {  
                echo "üöÄ Build des images Docker..."
                sh 'docker-compose -f docker-compose.yaml build'
            }
        }
    }
}



        stage('Run Application') {
            steps {
                script {
                    echo "üöÄ D√©marrage de l'application..."
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs.'
        }
       always {
            node('master') { // üîπ Ajout du bloc node avec le label 'master'
                echo "üìÇ Nettoyage de l'espace de travail apr√®s ex√©cution..."
                cleanWs()
            }
        }
    }
}