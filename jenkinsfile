pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqube-token')
    }

    stages {
        stage('Debug Credentials') {
            steps {
                script {
                    echo "SonarQube Token r√©cup√©r√©: ${SONAR_TOKEN}"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    echo "üßπ Nettoyage de l'espace de travail..."
                    cleanWs()
                    sh "git config --global http.postBuffer 524288000"
                    sh "git config --global https.postBuffer 524288000"

                    echo "üì• Clonage du Backend..."
                    dir('backend') {
                        sh "git clone -b picicd ${BACKEND_REPO} ."
                        sh "git fetch origin"
                        sh "git checkout picicd"
                        sh "git pull origin picicd"
                    }

                    echo "üì• Clonage du Frontend..."
                    retry(3) {
                        dir('frontend') {
                            sh "git clone --progress --verbose ${FRONTEND_REPO} ."
                        }
                    }

                    // D√©placer docker-compose.yaml vers la racine
                    echo "üìÇ D√©placement de docker-compose.yaml vers la racine..."
                    sh 'mv backend/docker-compose.yaml . || echo "‚ùå docker-compose.yaml not found in backend"'
                    sh 'ls -la docker-compose.yaml || echo "‚ùå docker-compose.yaml not found at root"'
                }
            }
        }

        stage('Debug Docker Compose File') {
            steps {
                script {
                    echo "üìÇ V√©rification des fichiers dans le r√©pertoire principal..."
                    sh 'ls -la'
                    echo "üìÇ V√©rification des fichiers dans backend..."
                    dir('backend') {
                        sh 'ls -la'
                    }
                    echo "üìÇ V√©rification des fichiers dans frontend..."
                    dir('frontend') {
                        sh 'ls -la'
                    }
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    dir('frontend') {
                        echo "üì¶ Installation des d√©pendances du frontend..."
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    dir('backend') {
                        echo "üì¶ Installation des d√©pendances du backend..."
                        sh 'npm install'
                    }
                }
            }
        }




  stage('Install Docker Compose') {
            steps {
                sh 'curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o ./docker-compose'
                sh 'chmod +x ./docker-compose'
                sh './docker-compose --version'
            }
        }

        stage('Clean Docker Environment') {
            steps {
                echo "üßπ Nettoyage de l'environnement Docker..."
                sh 'docker-compose -f docker-compose.yaml down -v --rmi local || true'
                sh 'docker system prune -f || true'
            }
        }

stage('Building Docker Images') {
    environment {
        // Activer BuildKit pour des builds plus rapides
        DOCKER_BUILDKIT = "1"
        COMPOSE_DOCKER_CLI_BUILD = "1"
    }
    steps {
        script {
            echo "üöÄ Build des images Docker (avec BuildKit)..."
            
            timeout(time: 30, unit: 'MINUTES') {
                retry(2) {
                    sh '''
                        # V√©rifier l'espace disque disponible
                        df -h
                        echo "V√©rification de la m√©moire :"
                        free -m

                        # Nettoyer le cache Docker avant le build
                        docker builder prune -f || true
                        
                        # Pr√©-t√©l√©charger l'image de base pour √©viter les probl√®mes r√©seau
                        docker pull node:18 || echo "‚ö†Ô∏è √âchec du pull, on continue avec le cache local"

                        # Build avec cache optimis√©
                        ./docker-compose -f docker-compose.yaml build \
                            --progress=plain \
                            --memory 2GB \
                            || (echo "‚ùå √âchec du build Docker" && docker system df && exit 1)
                        
                        echo "‚úÖ Build des images termin√©"
                        docker images
                    '''
                }
            }
        }
    }
}
      stage('Start Docker Services') {
            steps {
                script {
                    echo "üöÄ D√©marrage des services Docker..."
                    sh '''
                        if [ -f docker-compose.yaml ]; then
                            ./docker-compose -f docker-compose.yaml up -d || (echo "‚ùå √âchec du d√©marrage des services Docker, v√©rifiez les logs" && exit 1)
                            sleep 10
                            docker ps | grep mongo-test || (echo "‚ùå Conteneur mongo-test non d√©marr√©" && exit 1)
                            docker ps | grep mongodb || (echo "‚ùå Conteneur mongodb non d√©marr√©" && exit 1)
                        else
                            echo "‚ùå docker-compose.yaml introuvable, arr√™t du pipeline..."
                            exit 1
                        fi
                    '''
                }
            }
        }

  /* stage('Unit Test Backend') {
    steps {
        dir('backend') {
            sh 'npm install --save-dev jest-junit'
            timeout(time: 10, unit: 'MINUTES') {
                withEnv(['MONGO_TEST_URI=mongodb://testuser:testpass@mongo-test:27017/testdb?authSource=admin', 'NODE_ENV=test']) {
                    sh '''
                        sleep 30  # Attendre 30 secondes pour mongo-test
                        npm test -- --ci --forceExit --reporters=default --reporters=jest-junit --verbose --detectOpenHandles || (echo "Tests failed, check logs" && cat jest-junit.xml && exit 1)
                    '''
                }
            }
        }
    }
}*/

stage('Unit Test Backend') {
    steps {
        dir('backend') {
            sh 'rm -rf node_modules test-results coverage'
            sh 'npm install'
            sh 'npm install --save-dev jest-junit'
            
            timeout(time: 10, unit: 'MINUTES') {
                withEnv([
                    'NODE_ENV=test',
                    'USE_MOCKS=true',
                    'JEST_JUNIT_OUTPUT_DIR=test-results'
                ]) {
                    script {
                        // Ex√©cute les tests et continue m√™me en cas d'√©chec
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            sh '''
                                # Ex√©cute seulement les tests unitaires
                                npm test -- \
                                    --ci \
                                    --runInBand \
                                    --verbose \
                                    --detectOpenHandles \
                                    --testPathPattern="\\.unit\\.test\\.js$" \
                                    --reporters=default \
                                    --reporters=jest-junit \
                                    --collectCoverage \
                                    --coverageReporters=text-lcov \
                                    --coverageDirectory=coverage
                            '''
                        }
                        // V√©rifications non bloquantes
                        sh '''
                            [ -f test-results/jest-junit.xml ] || echo "‚ö†Ô∏è jest-junit.xml non g√©n√©r√©"
                            [ -d coverage ] || echo "‚ö†Ô∏è R√©pertoire coverage non g√©n√©r√©"
                        '''
                    }
                }
            }
        }
    }
}


      stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') {
                        dir('backend') {
                            echo "üöÄ D√©marrage de l'analyse SonarQube..."
                            sh "echo 'SonarQube Server URL: ${env.SONAR_HOST_URL}'"
                            sh "echo 'SonarQube Token: ${SONAR_TOKEN}'"
                            sh "curl -s http://192.168.33.10:9000 || echo 'ERROR: Cannot reach SonarQube server'"
                            timeout(time: 15, unit: 'MINUTES') {
                                withEnv(["SONAR_LOGIN=${SONAR_TOKEN}"]) {
                                    sh """
                                        ${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=projectpi \
                                        -Dsonar.sources=src \
                                        -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/coverage/**,src/models/LoginAttempt.js \
                                        -Dsonar.host.url=http://192.168.33.10:9000 \
                                        -Dsonar.login=\${SONAR_LOGIN} \
                                        -Dsonar.javascript.node.maxspace=3072 \
                                        -Dsonar.verbose=true \
                                        -Dsonar.junit.reportPaths=test-results/jest-junit.xml \
                                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }
   

        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        echo "üõ†Ô∏è Construction du frontend..."
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Debug Directory') {
            steps {
                echo "üìÇ Contenu de la racine :"
                sh 'ls -la'
                dir('backend') {
                    echo "üìÇ Contenu de backend :"
                    sh 'ls -la'
                }
                dir('frontend') {
                    echo "üìÇ Contenu de frontend :"
                    sh 'ls -la'
                }
            }
        }


        stage('Check Docker Compose') {
            steps {
                script {
                    sh 'docker-compose --version'
                }
            }
        }

    
        stage('Run Application') {
            steps {
                script {
                    echo "üöÄ D√©marrage de l'application..."
                    sh './docker-compose -f docker-compose.yaml up -d || (echo "‚ùå √âchec du d√©marrage de l\'application, v√©rifiez les logs" && exit 1)'
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs.'
dir(workspace) {
            sh './docker-compose -f docker-compose.yaml logs || true'
        }        }
        always {
            node('master') {
                echo "üßπ Nettoyage de l'environnement Docker..."
              dir(workspace) {
            sh './docker-compose -f docker-compose.yaml down -v --rmi local || true'
            sh 'docker system prune -f || true'
        }
        echo "üìÇ Nettoyage de l'espace de travail apr√®s ex√©cution..."
        cleanWs()
            }
        }
    }
}