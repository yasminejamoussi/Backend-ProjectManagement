pipeline {
    agent any

    environment {
        BACKEND_REPO = 'https://github.com/yasminejamoussi/Backend-ProjectManagement.git'
        FRONTEND_REPO = 'https://github.com/yasminejamoussi/FrontEnd-ProjectManagement.git'
        SONAR_TOKEN = credentials('sonarqube-token')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üßπ Nettoyage de l'espace de travail..."
                    cleanWs()

                    echo "üì• Clonage du Backend..."
                    sh "git clone ${BACKEND_REPO} backend"

                    echo "üì• Clonage du Frontend..."
                    sh "git clone ${FRONTEND_REPO} frontend"
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    dir('backend') {
                        echo "üì¶ Installation des d√©pendances du backend..."
                        sh 'npm install'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') {
                        dir('backend') {
                            echo "üöÄ D√©marrage de l'analyse SonarQube..."
                            timeout(time: 10, unit: 'MINUTES') {
                                sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=projectpi \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=http://192.168.33.10:9000 \
                                    -Dsonar.login=${SONAR_TOKEN} \
                                    -Dsonar.verbose=true
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Build Backend & Docker') {
            steps {
                script {
                    dir('backend') {
                        echo "üöÄ Construction des images Docker..."
                        sh 'docker-compose build'
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©. V√©rifiez les logs.'
        }
        always {
            echo "üìÇ Nettoyage de l'espace de travail apr√®s ex√©cution..."
            cleanWs()
        }
    }
}
