const Project = require('../models/Project');
const User = require('../models/User');
const Role = require('../models/Role');
const Task = require('../models/Task');
const { predictDelay } = require('../utils/PrjctDelayPrediction');
const { exec } = require("child_process");
const util = require("util");
const logActivity = require('../middleware/logActivity');
const calculateProjectStatus = require('../utils/projectStatus');

// Promisify exec pour une gestion asynchrone
const execPromise = util.promisify(exec);

// Liste des comp√©tences pour le fallback (align√©e avec SKILL_KEYWORDS dans extract_skills.py)
const SKILL_KEYWORDS = [
  "react", "javascript", "python", "sql", "java", "project management",
  "node.js", "node", "html", "css", "typescript", "mongodb", "docker", "aws",
  "angular", "vue.js", "git", "jenkins", "kubernetes",
  "ing√©nierie informatique", "d√©veloppement logiciel", "gestion de projet",
  "ui design", "ux design", "api development", "backend development", "frontend development",
  "database design", "cloud computing", "machine learning", "data analysis", "devops"
];

// Fonction r√©utilisable pour extraire les comp√©tences
const extractSkills = async (deliverables) => {
  // V√©rifier que deliverables est une liste
  if (!Array.isArray(deliverables)) {
    throw new Error("Les livrables doivent √™tre une liste");
  }

  // Nettoyer les livrables en joignant et en normalisant le texte
  const deliverablesText = deliverables
    .join(" ")
    .replace(/,\s*/g, " ")
    .replace(/\s+/g, " ")
    .trim();

  if (!deliverablesText) {
    return [];
  }

  console.log("üìù Texte des livrables envoy√© au script Python :", deliverablesText);

  let extractedSkills = [];
  try {
    console.log("ü§ñ Ex√©cution du script Python pour extraire les comp√©tences...");
    const escapedText = deliverablesText.replace(/"/g, '\\"');
    const command = `python scripts/extract_skills.py "${escapedText}"`;
    const { stdout, stderr } = await execPromise(command);

    if (stderr) {
      console.error("‚ùå Erreur lors de l'ex√©cution du script Python :", stderr);
      throw new Error(stderr);
    }

    const result = JSON.parse(stdout);
    extractedSkills = result.skills || [];
    console.log("‚úÖ Comp√©tences extraites par le script Python :", extractedSkills);
  } catch (scriptError) {
    console.error("‚ùå Erreur lors de l'ex√©cution du script Python :", scriptError.message);
    // Fallback : utiliser la liste compl√®te des comp√©tences
    extractedSkills = SKILL_KEYWORDS.filter((skill) =>
      deliverablesText.toLowerCase().includes(skill.toLowerCase())
    );
    console.log("‚ö†Ô∏è Fallback utilis√©, comp√©tences extraites :", extractedSkills);
  }

  // Filtrer les doublons ou les variantes (ex. garder "node.js" et supprimer "node")
  if (extractedSkills.includes("node.js") && extractedSkills.includes("node")) {
    extractedSkills = extractedSkills.filter(skill => skill !== "node");
  }

  return extractedSkills;
};

// Fonction r√©utilisable pour matcher les utilisateurs avec les comp√©tences requises
const matchUsers = async (requiredSkills) => {
  // R√©cup√©rer tous les utilisateurs avec des comp√©tences
  const users = await User.find({ skills: { $exists: true, $ne: [] } })
    .select('firstname lastname skills')
    .populate('role', 'name');

  // Filtrer les utilisateurs par r√¥le (Team Leader ou Team Member)
  const teamRoles = await Role.find({ name: { $in: ["Team Leader", "Team Member"] } });
  const teamRoleIds = teamRoles.map(role => role._id);
  const eligibleUsers = users.filter(user => teamRoleIds.includes(user.role?._id));

  // Calculer le score de compatibilit√© pour chaque utilisateur
  const matchedUsers = eligibleUsers.map(user => {
    const userSkills = user.skills || [];

    // Comp√©tences communes
    const commonSkills = userSkills.filter(skill => requiredSkills.includes(skill));

    // Score = (nombre de comp√©tences communes / nombre de comp√©tences requises) * 100
    const score = requiredSkills.length > 0 
      ? (commonSkills.length / requiredSkills.length) * 100 
      : 0;

    return {
      id: user._id,
      firstname: user.firstname,
      lastname: user.lastname,
      skills: user.skills,
      role: user.role?.name,
      commonSkills,
      score: parseFloat(score.toFixed(2)) // Arrondir √† 2 d√©cimales
    };
  });

  // Trier les utilisateurs par score (du plus haut au plus bas)
  return matchedUsers.sort((a, b) => b.score - a.score);
};

exports.predictDelay = async (req, res) => {
  try {
    const project = await Project.findById(req.params.id).populate('tasks');
    if (!project) return res.status(404).json({ message: "Projet non trouv√©" });

    const prediction = predictDelay(project);
    res.json(prediction);
  } catch (error) {
    console.error("Erreur lors de la pr√©diction du retard :", error);
    res.status(500).json({ error: error.message });
  }
};

// Create Project
exports.createProject = async (req, res) => {
  try {
    // √âtape 1 : Extraire les donn√©es de la requ√™te (sans "status")
    let { name, description, objectives, startDate, endDate, deliverables, projectManager, teamMembers, tasks } = req.body;

    // √âtape 2 : Valider les champs obligatoires (retirer "status" des champs requis)
    if (!name || !startDate || !endDate || !projectManager) {
      return res.status(422).json({ error: "Les champs obligatoires sont manquants." });
    }

    // √âtape 3 : Normaliser les champs de type string
    name = name.trim();
    description = description ? description.trim() : undefined;

    // √âtape 4 : Valider les dates
    if (new Date(endDate) < new Date(startDate)) {
      return res.status(422).json({ error: "La date de fin ne peut pas √™tre ant√©rieure √† la date de d√©but." });
    }

    // √âtape 5 : Valider le project manager
    const manager = await User.findById(projectManager).populate("role", "name");
    if (!manager) {
      return res.status(422).json({ error: "Le projectManager n'existe pas." });
    }
    if (!["Admin", "Project Manager"].includes(manager.role?.name)) {
      return res.status(422).json({ error: "Le projectManager doit √™tre un administrateur ou un chef de projet." });
    }

    // √âtape 6 : Valider les membres de l'√©quipe
    let validatedTeamMembers = [];
    if (teamMembers && Array.isArray(teamMembers) && teamMembers.length > 0) {
      const teamRoles = await Role.find({ name: { $in: ["Team Leader", "Team Member"] } });
      const teamRoleIds = teamRoles.map((role) => role._id);
      const members = await User.find({
        _id: { $in: teamMembers },
        role: { $in: teamRoleIds },
      }).populate("role", "name");
      if (members.length !== teamMembers.length) {
        return res.status(422).json({ error: "Certains membres de l'√©quipe n'existent pas ou n'ont pas le bon r√¥le." });
      }
      validatedTeamMembers = members.map((member) => member._id);
    }

    // √âtape 7 : Valider les livrables (doivent √™tre une liste)
    if (deliverables && !Array.isArray(deliverables)) {
      return res.status(422).json({ error: "Les livrables doivent √™tre une liste." });
    }

    // √âtape 8 : Valider et pr√©parer les t√¢ches
    let validatedTasks = [];
    if (tasks && Array.isArray(tasks) && tasks.length > 0) {
      const teamRoles = await Role.find({ name: { $in: ["Team Leader", "Team Member"] } });
      const teamRoleIds = teamRoles.map((role) => role._id);

      validatedTasks = tasks.map((task) => ({
        title: task.title.trim(),
        description: task.description ? task.description.trim() : undefined,
        status: task.status || "To Do",
        priority: task.priority || "Medium",
        project: null, // Sera d√©fini apr√®s la cr√©ation du projet
        assignedTo: task.assignedTo || [],
        dueDate: task.dueDate ? new Date(task.dueDate) : undefined,
        startDate: task.startDate ? new Date(task.startDate) : undefined,
        createdBy: projectManager,
      }));

      for (const task of validatedTasks) {
        if (task.assignedTo.length > 0) {
          const assignedMembers = await User.find({
            _id: { $in: task.assignedTo },
            role: { $in: teamRoleIds },
          });
          if (assignedMembers.length !== task.assignedTo.length) {
            return res.status(422).json({ error: "Certains assign√©s dans les t√¢ches n'existent pas ou n'ont pas le bon r√¥le." });
          }
          task.assignedTo = assignedMembers.map((member) => member._id);
        }
      }
    }

    // √âtape 9 : Cr√©er le projet (sans sp√©cifier "status" manuellement)
    const newProject = new Project({
      name,
      description,
      objectives: objectives || [],
      startDate: new Date(startDate),
      endDate: new Date(endDate),
      deliverables: deliverables || [],
      projectManager,
      teamMembers: validatedTeamMembers,
      tasks: [],
      requiredSkills: [],
    });

    // √âtape 10 : Sauvegarder le projet initialement
    await newProject.save();

    // √âtape 11 : Cr√©er et lier les t√¢ches
    if (validatedTasks.length > 0) {
      validatedTasks.forEach((task) => (task.project = newProject._id));
      const createdTasks = await Task.insertMany(validatedTasks);
      newProject.tasks = createdTasks.map((task) => task._id);
    }

    // √âtape 12 : Calculer le statut du projet dynamiquement
    const calculatedStatus = calculateProjectStatus(validatedTasks);
    newProject.status = calculatedStatus;

    // √âtape 13 : Extraire les comp√©tences et matcher les utilisateurs (si livrables fournis)
    let suggestedUsers = [];
    if (deliverables && Array.isArray(deliverables) && deliverables.length > 0) {
      newProject.requiredSkills = await extractSkills(deliverables);
      suggestedUsers = await matchUsers(newProject.requiredSkills);
    }

    // √âtape 14 : Sauvegarder le projet avec le statut calcul√© et les t√¢ches
    await newProject.save();

    // √âtape 15 : Remplir les donn√©es pour la r√©ponse
    const populatedProject = await Project.findById(newProject._id)
      .populate("projectManager", "firstname lastname email")
      .populate("teamMembers", "firstname lastname email")
      .populate({
        path: "tasks",
        populate: { path: "assignedTo", select: "firstname lastname" },
      });

    // √âtape 16 : Renvoyer le projet cr√©√© et les utilisateurs sugg√©r√©s
    res.status(201).json({
      project: populatedProject,
      suggestedUsers,
    });
  } catch (error) {
    console.error("Erreur lors de la cr√©ation du projet :", error);
    res.status(500).json({ error: error.message });
  }
};

exports.getAllProjects = async (req, res) => {
  try {
    // √âtape 1 : Extraire les param√®tres de la requ√™te
    const { status, startDate, endDate, projectManager, sortBy, order } = req.query;
    console.log("Param√®tres re√ßus :", req.query);
    let filter = {};

    // √âtape 2 : Construire les filtres (sans filtrer par "status" pour l'instant)
    if (projectManager) filter.projectManager = projectManager;
    if (startDate) filter.startDate = { ...filter.startDate, $gte: new Date(startDate) };
    if (endDate) filter.endDate = { ...filter.endDate, $lte: new Date(endDate) };

    // √âtape 3 : R√©cup√©rer tous les projets
    let projects = await Project.find(filter)
      .populate("projectManager", "firstname lastname email skills profileImage")
      .populate({
        path: "teamMembers",
        select: "firstname lastname email skills profileImage",
        populate: { path: "role", select: "name" }
      })
      .populate("tasks");

    // √âtape 4 : R√©cup√©rer toutes les t√¢ches associ√©es aux projets
    const projectIds = projects.map(project => project._id);
    const tasks = await Task.find({ project: { $in: projectIds } });

    // Cr√©er un mapping des t√¢ches par projet
    const tasksByProject = {};
    tasks.forEach(task => {
      const projectId = task.project.toString();
      if (!tasksByProject[projectId]) {
        tasksByProject[projectId] = [];
      }
      tasksByProject[projectId].push(task);
    });

    // √âtape 5 : Recalculer le statut de chaque projet
    projects = projects.map(project => {
      const projectTasks = tasksByProject[project._id.toString()] || [];
      const calculatedStatus = calculateProjectStatus(projectTasks);
      return {
        ...project._doc,
        status: calculatedStatus // Remplacer le statut stock√© par celui calcul√©
      };
    });

    // √âtape 6 : Appliquer le filtre sur le statut (si fourni)
    if (status) {
      projects = projects.filter(project => project.status === status);
    }

    // √âtape 7 : Appliquer le tri
    if (sortBy) {
      const sortOrder = order === "desc" ? -1 : 1;
      projects.sort((a, b) => {
        const valueA = a[sortBy];
        const valueB = b[sortBy];
        return sortOrder * (valueA > valueB ? 1 : valueA < valueB ? -1 : 0);
      });
    }

    // √âtape 8 : Log des donn√©es retourn√©es
    console.log("üìã Projets retourn√©s :", projects.map(project => ({
      id: project._id,
      name: project.name,
      status: project.status, // Log du statut calcul√©
      projectManager: project.projectManager ? {
        name: `${project.projectManager.firstname} ${project.projectManager.lastname}`,
        email: project.projectManager.email,
        skills: project.projectManager.skills
      } : null,
      teamMembers: project.teamMembers.map(member => ({
        name: `${member.firstname} ${member.lastname}`,
        email: member.email,
        skills: member.skills,
        role: member.role?.name
      }))
    })));

    // √âtape 9 : Renvoyer les projets
    res.json(projects);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des projets :", error);
    res.status(500).json({ error: error.message });
  }
};
exports.getProjectById = async (req, res) => {
  try {
    const project = await Project.findById(req.params.id)
      .populate("projectManager", "firstname lastname email")
      .populate({
        path: "teamMembers",
        select: "firstname lastname email",
        populate: { path: "role", select: "name" }
      })
      .populate("tasks");
    console.log("Projet trouv√© :", project);
    if (!project) return res.status(404).json({ message: "Projet non trouv√©" });
    res.json(project);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du projet :", error);
    res.status(500).json({ error: error.message });
  }
};

// Update Project
exports.updateProject = async (req, res) => {
  try {
    // √âtape 1 : Extraire les donn√©es de la requ√™te
    const { projectManager, startDate, endDate, tasks, deliverables } = req.body;

    // √âtape 2 : R√©cup√©rer le projet avant mise √† jour
    const previousProject = await Project.findById(req.params.id)
      .populate("projectManager", "firstname lastname email")
      .populate({
        path: "teamMembers",
        select: "firstname lastname email",
        populate: { path: "role", select: "name" }
      })
      .populate("tasks");
    if (!previousProject) {
      return res.status(404).json({ message: "Projet non trouv√©" });
    }

    // √âtape 3 : Stocker l'√©tat pr√©c√©dent pour logging
    res.locals.previousProject = previousProject.toObject();

    // √âtape 4 : V√©rifier que projectManager ne peut pas √™tre modifi√©
    if (projectManager) {
      return res.status(403).json({ error: "Le projectManager ne peut pas √™tre modifi√© apr√®s la cr√©ation." });
    }

    // √âtape 5 : Valider les dates
    if (startDate && endDate && new Date(endDate) < new Date(startDate)) {
      return res.status(422).json({ error: "La date de fin doit √™tre apr√®s la date de d√©but." });
    }

    // √âtape 6 : Valider et mettre √† jour les t√¢ches
    let validatedTasks = [];
    if (tasks && Array.isArray(tasks)) {
      const teamRoles = await Role.find({ name: { $in: ["Team Leader", "Team Member"] } });
      const teamRoleIds = teamRoles.map(role => role._id);

      validatedTasks = await Promise.all(tasks.map(async task => {
        const taskData = {
          title: task.title.trim(),
          description: task.description ? task.description.trim() : undefined,
          status: task.status || "To Do",
          priority: task.priority || "Medium",
          project: req.params.id,
          assignedTo: task.assignedTo || [],
          dueDate: task.dueDate ? new Date(task.dueDate) : undefined,
          startDate: task.startDate ? new Date(task.startDate) : undefined,
          createdBy: task.createdBy || previousProject.projectManager,
        };

        if (taskData.assignedTo.length > 0) {
          const assignedMembers = await User.find({ 
            _id: { $in: taskData.assignedTo }, 
            role: { $in: teamRoleIds } 
          });
          if (assignedMembers.length !== taskData.assignedTo.length) {
            throw new Error("Certains assign√©s dans les t√¢ches n'existent pas ou n'ont pas le bon r√¥le.");
          }
          taskData.assignedTo = assignedMembers.map(member => member._id);
        }

        if (task._id) {
          const previousTask = await Task.findById(task._id);
          res.locals.previousTask = previousTask.toObject();
          const updatedTask = await Task.findByIdAndUpdate(task._id, taskData, { new: true });
          return updatedTask;
        } else {
          const newTask = new Task(taskData);
          await newTask.save();
          return newTask;
        }
      }));

      req.body.tasks = validatedTasks.map(task => task._id);
    }

    // √âtape 7 : V√©rifier les livrables
    if (deliverables && !Array.isArray(deliverables)) {
      return res.status(422).json({ error: "Les livrables doivent √™tre une liste" });
    }

    // √âtape 8 : Ajouter updatedBy
    req.body.updatedBy = req.user?.id || previousProject.projectManager;

    // √âtape 9 : Supprimer le champ "status" de req.body (il sera calcul√©)
    delete req.body.status;

    // √âtape 10 : Mettre √† jour le projet
    const updatedProject = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true })
      .populate("projectManager", "firstname lastname email")
      .populate({
        path: "teamMembers",
        select: "firstname lastname email",
        populate: { path: "role", select: "name" }
      })
      .populate("tasks");

    if (!updatedProject) return res.status(404).json({ message: "Projet non trouv√©" });

    // √âtape 11 : Mettre √† jour les comp√©tences si des livrables sont fournis
    if (deliverables && Array.isArray(deliverables) && deliverables.length > 0) {
      updatedProject.requiredSkills = await extractSkills(deliverables);
    }

    // √âtape 12 : Recalculer le statut du projet
    const projectTasks = await Task.find({ project: updatedProject._id });
    updatedProject.status = calculateProjectStatus(projectTasks);

    // √âtape 13 : Sauvegarder le projet avec le statut calcul√©
    await updatedProject.save();

    // √âtape 14 : Renvoyer le projet mis √† jour
    res.json(updatedProject);
  } catch (error) {
    console.error("Erreur lors de la mise √† jour du projet :", error);
    res.status(500).json({ error: error.message });
  }
};

// Delete Project
exports.deleteProject = async (req, res) => {
  try {
    const deletedProject = await Project.findByIdAndDelete(req.params.id);
    if (!deletedProject) return res.status(404).json({ message: "Projet non trouv√©" });

    // Ajouter deletedBy (supposons que req.user.id est d√©fini par une middleware d'authentification)
    req.body.deletedBy = req.user?.id || deletedProject.projectManager; // Fallback sur projectManager si req.user.id n'est pas d√©fini

    await Task.deleteMany({ project: req.params.id });

    res.json({ message: "Projet et ses t√¢ches supprim√©s avec succ√®s" });
  } catch (error) {
    console.error("Erreur lors de la suppression du projet :", error);
    res.status(500).json({ error: error.message });
  }
};

exports.extractSkillsFromDeliverables = async (req, res) => {
  try {
    const projectId = req.params.id;
    const project = await Project.findById(projectId);

    if (!project) {
      return res.status(404).json({ message: "Project not found" });
    }

    project.requiredSkills = await extractSkills(project.deliverables);
    await project.save();

    res.json({
      message: "Skills extracted successfully",
      requiredSkills: project.requiredSkills,
    });
  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

exports.clusterUsers = async (req, res) => {
  try {
      // R√©cup√©rer tous les utilisateurs avec leurs comp√©tences
      const users = await User.find({ skills: { $exists: true, $ne: [] } }).select('firstname lastname skills');
      if (!users || users.length === 0) {
          return res.status(404).json({ message: "Aucun utilisateur avec des comp√©tences trouv√©" });
      }

      // Pr√©parer les donn√©es pour le clustering
      const usersSkills = users.map(user => user.skills || []);
      const numClusters = req.query.numClusters ? parseInt(req.query.numClusters) : 3;

      if (usersSkills.length < numClusters) {
          return res.status(400).json({ message: `Nombre d'utilisateurs (${usersSkills.length}) insuffisant pour ${numClusters} clusters` });
      }

      // √âchapper correctement les guillemets dans la cha√Æne JSON
      const escapedJson = JSON.stringify(usersSkills).replace(/"/g, '\\"');
      const command = `/venv/bin/python src/scripts/cluster_users.py "${escapedJson}" ${numClusters}`;
      console.log("Commande ex√©cut√©e :", command); // Pour d√©boguer

      const { stdout, stderr } = await execPromise(command);

      if (stderr) {
          console.error("‚ùå Erreur lors de l'ex√©cution du script de clustering :", stderr);
          throw new Error(stderr);
      }

      const result = JSON.parse(stdout);
      const clusterLabels = result.clusters;

      // Associer chaque utilisateur √† son cluster
      const clusteredUsers = users.map((user, index) => ({
          id: user._id,
          firstname: user.firstname,
          lastname: user.lastname,
          skills: user.skills,
          cluster: clusterLabels[index]
      }));

      // Regrouper les utilisateurs par cluster
      const clusters = {};
      clusteredUsers.forEach(user => {
          if (!clusters[user.cluster]) {
              clusters[user.cluster] = [];
          }
          clusters[user.cluster].push(user);
      });

      res.json({ clusters });
  } catch (error) {
      console.error("‚ùå Erreur lors du clustering des utilisateurs :", error);
      res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};

exports.matchUsersToProject = async (req, res) => {
  try {
    const projectId = req.params.id;
    const project = await Project.findById(projectId);

    if (!project) {
      return res.status(404).json({ message: "Projet non trouv√©" });
    }

    if (!project.requiredSkills || project.requiredSkills.length === 0) {
      return res.status(400).json({ message: "No skills required for this project" });
    }

    // Log des comp√©tences requises
    console.log("üîç Comp√©tences requises pour le projet :", project.requiredSkills);

    // R√©cup√©rer tous les utilisateurs avec des comp√©tences
    const users = await User.find({ skills: { $exists: true, $ne: [] } })
      .select('firstname lastname skills')
      .populate('role', 'name');

    // Log des utilisateurs r√©cup√©r√©s
    console.log("üë• Utilisateurs r√©cup√©r√©s pour le matching :", users.map(user => ({
      name: `${user.firstname} ${user.lastname}`,
      skills: user.skills,
      role: user.role?.name
    })));

    // Filtrer les utilisateurs par r√¥le (Team Leader ou Team Member)
    const teamRoles = await Role.find({ name: { $in: ["Team Leader", "Team Member"] } });
    const teamRoleIds = teamRoles.map(role => role._id.toString());
    const eligibleUsers = users.filter(user => user.role && teamRoleIds.includes(user.role._id.toString()));

    // Log des utilisateurs √©ligibles
    console.log("üë• Utilisateurs √©ligibles (Team Leader/Team Member) :", eligibleUsers.map(user => ({
      name: `${user.firstname} ${user.lastname}`,
      skills: user.skills,
      role: user.role?.name
    })));

    // R√©cup√©rer toutes les t√¢ches assign√©es (non termin√©es) pour compter les assignations
    const tasks = await Task.find({ status: { $nin: ['Done', 'Tested'] } })
      .select('assignedTo');

    // Cr√©er un mapping des utilisateurs et de leurs nombres de t√¢ches assign√©es
    const taskCountMap = {};
    eligibleUsers.forEach(user => {
      taskCountMap[user._id.toString()] = 0; // Initialiser √† 0 pour chaque utilisateur
    });

    tasks.forEach(task => {
      if (task.assignedTo && task.assignedTo.length > 0) {
        task.assignedTo.forEach(assignee => {
          const userId = assignee.toString();
          if (taskCountMap[userId] !== undefined) {
            taskCountMap[userId] += 1; // Incr√©menter le compteur pour cet utilisateur
          }
        });
      }
    });

    // Log du nombre de t√¢ches par utilisateur
    console.log("üìã Nombre de t√¢ches assign√©es par utilisateur :", taskCountMap);

    // Normaliser les comp√©tences requises en minuscules
    const normalizedRequiredSkills = project.requiredSkills.map(skill => skill.toLowerCase());

    // Calculer le score de compatibilit√© pour chaque utilisateur
    const matchedUsers = eligibleUsers.map(user => {
      const userSkills = user.skills || [];
      // Normaliser les comp√©tences de l‚Äôutilisateur en minuscules
      const normalizedUserSkills = userSkills.map(skill => skill.toLowerCase());

      // Comp√©tences communes (comparaison insensible √† la casse)
      const commonSkills = userSkills.filter(skill => normalizedRequiredSkills.includes(skill.toLowerCase()));

      // Score = (nombre de comp√©tences communes / nombre de comp√©tences requises) * 100
      const score = project.requiredSkills.length > 0 
        ? (commonSkills.length / project.requiredSkills.length) * 100 
        : 0;

      return {
        id: user._id,
        firstname: user.firstname,
        lastname: user.lastname,
        skills: user.skills, // Garder les comp√©tences originales pour l‚Äôaffichage
        role: user.role?.name,
        commonSkills,
        taskCount: taskCountMap[user._id.toString()] || 0, // Nombre de t√¢ches assign√©es
        score: parseFloat(score.toFixed(2))
      };
    });

    // Filtrer les utilisateurs avec un score sup√©rieur √† 0 et trier par score (d√©croissant) puis par taskCount (croissant)
    const filteredMatchedUsers = matchedUsers
      .filter(user => user.score > 0)
      .sort((a, b) => {
        if (a.score !== b.score) {
          return b.score - a.score; // Tri par score d√©croissant
        }
        return a.taskCount - b.taskCount; // Si m√™me score, tri par taskCount croissant
      });

    // Log final des utilisateurs match√©s
    console.log("‚úÖ Utilisateurs match√©s (tri√©s) :", filteredMatchedUsers);

    res.json({
      projectId: project._id,
      projectName: project.name,
      requiredSkills: project.requiredSkills,
      matchedUsers: filteredMatchedUsers
    });
  } catch (error) {
    console.error("‚ùå Erreur lors du matching des utilisateurs :", error);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};

// R√©cup√©rer les projets avec managedProjects et assignedTasks calcul√©s dynamiquement
exports.getProjectsWithDetails = async (req, res) => {
  try {
    const { status, startDate, endDate, projectManager, sortBy, order } = req.query;
    console.log("Param√®tres re√ßus pour getProjectsWithDetails :", req.query);
    let filter = {};

    if (status) filter.status = status;
    if (projectManager) filter.projectManager = projectManager;
    if (startDate) filter.startDate = { ...filter.startDate, $gte: new Date(startDate) };
    if (endDate) filter.endDate = { ...filter.endDate, $lte: new Date(endDate) };

    let sortOptions = {};
    if (sortBy) {
      const sortOrder = order === "desc" ? -1 : 1;
      sortOptions[sortBy] = sortOrder;
    }

    // R√©cup√©rer les projets avec population
    const projects = await Project.find(filter)
      .populate({
        path: "projectManager",
        select: "firstname lastname email",
        populate: { path: "role", select: "name" }
      })
      .populate({
        path: "teamMembers",
        select: "firstname lastname email",
        populate: { path: "role", select: "name" }
      })
      .populate("tasks")
      .sort(sortOptions);

    // Calculer managedProjects et assignedTasks dynamiquement
    const enrichedProjects = await Promise.all(
      projects.map(async (project) => {
        const projectId = project._id;

        // Calculer managedProjects pour projectManager
        const managerManagedProjects = await Project.countDocuments({
          $or: [
            { projectManager: project.projectManager?._id },
            { teamMembers: project.projectManager?._id }
          ]
        });

        // Calculer assignedTasks pour projectManager
        const managerAssignedTasks = await Task.countDocuments({
          assignedTo: project.projectManager?._id
        });

        // Calculer managedProjects et assignedTasks pour teamMembers
        const enrichedTeamMembers = await Promise.all(
          (project.teamMembers || []).map(async (member) => {
            const memberManagedProjects = await Project.countDocuments({
              $or: [
                { projectManager: member._id },
                { teamMembers: member._id }
              ]
            });
            const memberAssignedTasks = await Task.countDocuments({
              assignedTo: member._id
            });
            return {
              ...member.toObject(),
              managedProjects: Array(memberManagedProjects).fill(projectId), // Simuler un tableau
              assignedTasks: Array(memberAssignedTasks).fill(projectId) // Simuler un tableau
            };
          })
        );

        return {
          ...project.toObject(),
          projectManager: project.projectManager
            ? {
                ...project.projectManager.toObject(),
                managedProjects: Array(managerManagedProjects).fill(projectId), // Simuler un tableau
                assignedTasks: Array(managerAssignedTasks).fill(projectId) // Simuler un tableau
              }
            : null,
          teamMembers: enrichedTeamMembers
        };
      })
    );

    res.json(enrichedProjects);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des projets avec d√©tails :", error);
    res.status(500).json({ error: error.message });
  }
};