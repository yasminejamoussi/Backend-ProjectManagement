services:
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "4000:4000"
    volumes:
      - "./backend/:/app"
      - "/app/node_modules"  # Empêche l'écrasement des dépendances
    networks:
      - app-network

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web
    ports:
      - "5173:5173"
    volumes:
      - "./frontend/:/src"
      - "/src/node_modules"  # Empêche l'écrasement des dépendances
      - "./frontend/public:/src/public"
    networks:
      - app-network

  mongo:
    image: mongo:4.4
    restart: always
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: projectmanagement
      MONGO_INITDB_ROOT_PASSWORD: project123
    volumes:
      - db-data:/data/db

  mongo-test:  
    image: mongo:4.4
    healthcheck:
      test: mongo "mongodb://testuser:testpass@localhost:27017/testdb?authSource=admin" --eval "db.adminCommand('ping')" --quiet
      interval: 5s
      timeout: 30s
      retries: 5
    container_name: mongo-test
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: testuser
      MONGO_INITDB_ROOT_PASSWORD: testpass
    volumes:
      - mongo-test-data:/data/db
    networks:
      - app-network

volumes:
  db-data: {}
  mongo-test-data: {} 

networks:
  app-network:
    driver: bridge 